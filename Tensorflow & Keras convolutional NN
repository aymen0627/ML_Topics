{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aymen0627/ML_Topics/blob/Applications/Tensorflow%20%26%20Keras%20convolutional%20NN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mOPUsdA9Xewj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "00719c17-f493-4ea7-d004-a87b2eb4026c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nwe utilize Tensorflow and keras to train a convolutional NN for clas-\\nsification using the Fashion MNIST (M = 10) dataset 3. In this dataset, we have N = 60000\\ntraining data points and 10000 examples for testing where each one consists of a gray scale image\\nwith F = 28 ∗28 = 784 features (or pixels). The dataset is loaded and pre-processed in a similar\\nfashion as the MNIST digits dataset. \\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "#Group 8 - Aymen Hasnain & Thomas Kipping\n",
        "#Problem 4\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\"\"\"\n",
        "we utilize Tensorflow and keras to train a convolutional NN for clas-\n",
        "sification using the Fashion MNIST (M = 10) dataset 3. In this dataset, we have N = 60000\n",
        "training data points and 10000 examples for testing where each one consists of a gray scale image\n",
        "with F = 28 ∗28 = 784 features (or pixels). The dataset is loaded and pre-processed in a similar\n",
        "fashion as the MNIST digits dataset. \n",
        "\"\"\"\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "here, we use (i) convolutional layer with 128 units and filter size\n",
        "of 3×3, and (ii) max pooling layer with a pool size of 4×4. Then, use the flatten layer to vectorize the\n",
        "output tensor. Continue the construction of the NN by adding two dense layers (with ReLU activation\n",
        "and 100 units), and an output layer. Compile the model with ADAM and the cross-entropy loss, train\n",
        "using 40 epochs and batch size of 100, and report the training and testing accuracy. Report the testing\n",
        "and training error and CA w.r.t. epochs.\n",
        "\n",
        "\"\"\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "9jtxOUDDwe-7",
        "outputId": "7b041b3f-8398-4a28-ae7d-e2c19d29600c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nhere, we use (i) convolutional layer with 128 units and filter size\\nof 3×3, and (ii) max pooling layer with a pool size of 4×4. Then, use the flatten layer to vectorize the\\noutput tensor. Continue the construction of the NN by adding two dense layers (with ReLU activation\\nand 100 units), and an output layer. Compile the model with ADAM and the cross-entropy loss, train\\nusing 40 epochs and batch size of 100, and report the training and testing accuracy. Report the testing\\nand training error and CA w.r.t. epochs.\\n\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#This is a regression model. \n",
        "#F is the number of features in each training or testing example. \n",
        "#K is the number of units in each of the hidden layers. This number need not be fixed for both layers. \n",
        "\n",
        "\n",
        "number_of_feature = 784\n",
        "number_of_units_in_hidden_layer = 100\n",
        "\n",
        "\n",
        "#### load the Fashion MNIST dataset\n",
        "(x_train, y_train), (x_test, y_test) =  tf.keras.datasets.fashion_mnist.load_data()\n",
        "\n",
        "\n",
        "#### pre-process the data\n",
        "x_train = x_train.reshape((60000, 28, 28, 1))\n",
        "x_test = x_test.reshape((10000, 28, 28, 1))\n",
        "\n",
        "\n",
        "# one hot encode target values\n",
        "y_train = tf.keras.utils.to_categorical(y_train)\n",
        "y_test = tf.keras.utils.to_categorical(y_test)\n",
        "\n",
        "\n",
        "# convert from integers to floats\n",
        "x_train = x_train.astype('float32')\n",
        "x_test = x_test.astype('float32')\n",
        "\n",
        "# normalize to range 0-1\n",
        "x_train = x_train / 255.0\n",
        "x_test = x_test / 255.0"
      ],
      "metadata": {
        "id": "z8-zI1ztjZ68",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "48227fef-3e72-486d-8381-ea27d862d5e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "29515/29515 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26421880/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "5148/5148 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4422102/4422102 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### construct the NN regression model\n",
        "NN_regression_model = tf.keras.Sequential()\n",
        "# define layer\n",
        "layer_1 = layers.Conv2D(128, (3, 3), activation='relu', input_shape=(28,28,1))\n",
        "# add layer to the model\n",
        "NN_regression_model.add(layer_1)\n",
        "\n",
        "layer_2 = layers.MaxPooling2D((4, 4))\n",
        "NN_regression_model.add(layer_2)\n",
        "\n",
        "layer_3 = layers.Flatten()\n",
        "NN_regression_model.add(layer_3)\n",
        "\n",
        "layer_4 = layers.Dense(100, activation='relu')\n",
        "NN_regression_model.add(layer_4)\n",
        "\n",
        "layer_5 = layers.Dense(100, activation='relu')\n",
        "NN_regression_model.add(layer_5)\n",
        "\n",
        "# define layer\n",
        "output_layer = layers.Dense(10, activation='softmax') #no activation layer for output\n",
        "# add layer to the model\n",
        "NN_regression_model.add(output_layer)\n",
        "\n",
        "optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001) #USE RMPS PROP, .001 learning rate\n",
        "loss = tf.keras.losses.CategoricalCrossentropy(from_logits=True)\n",
        "#### specify the number of epochs and batch size\n",
        "epochs     = 40 #need 40 epochs for num4\n",
        "batch_size = 100 #batch size 100 for num4\n",
        "\n",
        "#### compile the model\n",
        "NN_regression_model.compile(optimizer=optimizer, loss=loss, metrics='accuracy') # mean absolute error\n"
      ],
      "metadata": {
        "id": "flcxAg42jmUt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# #### train the whole batch for 1000 epochs\n",
        "history_train = NN_regression_model.fit(x_train, y_train, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "train_error_mse,_ = NN_regression_model.evaluate(x_train, y_train)\n",
        "history_test = NN_regression_model.fit(x_test, y_test, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "test_error_mse,_ = NN_regression_model.evaluate(x_test, y_test)\n",
        "print(\"MSE on training data = {} ; MSE of testing data = {}\".format(train_error_mse, test_error_mse))"
      ],
      "metadata": {
        "id": "s7pfzfP1jwva",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c9aca37-705a-4c9b-9be8-777c3e610e51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1082: UserWarning: \"`categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a sigmoid or softmax activation and thus does not represent logits. Was this intended?\"\n",
            "  return dispatch_target(*args, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "600/600 [==============================] - 11s 5ms/step - loss: 0.5186 - accuracy: 0.8137\n",
            "Epoch 2/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.3385 - accuracy: 0.8777\n",
            "Epoch 3/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.2974 - accuracy: 0.8920\n",
            "Epoch 4/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.2734 - accuracy: 0.9002\n",
            "Epoch 5/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.2518 - accuracy: 0.9073\n",
            "Epoch 6/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.2361 - accuracy: 0.9125\n",
            "Epoch 7/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.2247 - accuracy: 0.9164\n",
            "Epoch 8/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.2112 - accuracy: 0.9211\n",
            "Epoch 9/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1953 - accuracy: 0.9268\n",
            "Epoch 10/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1858 - accuracy: 0.9293\n",
            "Epoch 11/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1755 - accuracy: 0.9332\n",
            "Epoch 12/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1647 - accuracy: 0.9381\n",
            "Epoch 13/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1552 - accuracy: 0.9413\n",
            "Epoch 14/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1435 - accuracy: 0.9457\n",
            "Epoch 15/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1364 - accuracy: 0.9490\n",
            "Epoch 16/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1262 - accuracy: 0.9529\n",
            "Epoch 17/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1218 - accuracy: 0.9538\n",
            "Epoch 18/40\n",
            "600/600 [==============================] - 4s 6ms/step - loss: 0.1084 - accuracy: 0.9587\n",
            "Epoch 19/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1064 - accuracy: 0.9596\n",
            "Epoch 20/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0978 - accuracy: 0.9629\n",
            "Epoch 21/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0915 - accuracy: 0.9652\n",
            "Epoch 22/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0855 - accuracy: 0.9675\n",
            "Epoch 23/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0822 - accuracy: 0.9689\n",
            "Epoch 24/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0745 - accuracy: 0.9722\n",
            "Epoch 25/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0706 - accuracy: 0.9732\n",
            "Epoch 26/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0630 - accuracy: 0.9769\n",
            "Epoch 27/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0632 - accuracy: 0.9765\n",
            "Epoch 28/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0533 - accuracy: 0.9798\n",
            "Epoch 29/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0491 - accuracy: 0.9819\n",
            "Epoch 30/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0506 - accuracy: 0.9809\n",
            "Epoch 31/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0492 - accuracy: 0.9821\n",
            "Epoch 32/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0471 - accuracy: 0.9828\n",
            "Epoch 33/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0422 - accuracy: 0.9848\n",
            "Epoch 34/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0429 - accuracy: 0.9836\n",
            "Epoch 35/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0343 - accuracy: 0.9878\n",
            "Epoch 36/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0382 - accuracy: 0.9859\n",
            "Epoch 37/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0360 - accuracy: 0.9863\n",
            "Epoch 38/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0330 - accuracy: 0.9884\n",
            "Epoch 39/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0311 - accuracy: 0.9889\n",
            "Epoch 40/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0310 - accuracy: 0.9892\n",
            "1875/1875 [==============================] - 5s 3ms/step - loss: 0.0376 - accuracy: 0.9862\n",
            "Epoch 1/40\n",
            "100/100 [==============================] - 1s 6ms/step - loss: 0.4498 - accuracy: 0.8831\n",
            "Epoch 2/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.2310 - accuracy: 0.9173\n",
            "Epoch 3/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.1784 - accuracy: 0.9353\n",
            "Epoch 4/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.1455 - accuracy: 0.9481\n",
            "Epoch 5/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.1198 - accuracy: 0.9584\n",
            "Epoch 6/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0962 - accuracy: 0.9681\n",
            "Epoch 7/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0838 - accuracy: 0.9730\n",
            "Epoch 8/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0665 - accuracy: 0.9784\n",
            "Epoch 9/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0546 - accuracy: 0.9832\n",
            "Epoch 10/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0480 - accuracy: 0.9857\n",
            "Epoch 11/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0383 - accuracy: 0.9902\n",
            "Epoch 12/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0297 - accuracy: 0.9925\n",
            "Epoch 13/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0224 - accuracy: 0.9956\n",
            "Epoch 14/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0206 - accuracy: 0.9965\n",
            "Epoch 15/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0157 - accuracy: 0.9977\n",
            "Epoch 16/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0130 - accuracy: 0.9982\n",
            "Epoch 17/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0097 - accuracy: 0.9990\n",
            "Epoch 18/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0071 - accuracy: 0.9996\n",
            "Epoch 19/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0055 - accuracy: 0.9999\n",
            "Epoch 20/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0053 - accuracy: 0.9998\n",
            "Epoch 21/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0034 - accuracy: 1.0000\n",
            "Epoch 22/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0028 - accuracy: 1.0000\n",
            "Epoch 23/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0023 - accuracy: 1.0000\n",
            "Epoch 24/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0020 - accuracy: 1.0000\n",
            "Epoch 25/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0017 - accuracy: 1.0000\n",
            "Epoch 26/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0016 - accuracy: 1.0000\n",
            "Epoch 27/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0014 - accuracy: 1.0000\n",
            "Epoch 28/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0012 - accuracy: 1.0000\n",
            "Epoch 29/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0011 - accuracy: 1.0000\n",
            "Epoch 30/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 9.9533e-04 - accuracy: 1.0000\n",
            "Epoch 31/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 8.9225e-04 - accuracy: 1.0000\n",
            "Epoch 32/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 8.1710e-04 - accuracy: 1.0000\n",
            "Epoch 33/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 7.2796e-04 - accuracy: 1.0000\n",
            "Epoch 34/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 6.7385e-04 - accuracy: 1.0000\n",
            "Epoch 35/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 6.2195e-04 - accuracy: 1.0000\n",
            "Epoch 36/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 5.7076e-04 - accuracy: 1.0000\n",
            "Epoch 37/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 5.1746e-04 - accuracy: 1.0000\n",
            "Epoch 38/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 4.8403e-04 - accuracy: 1.0000\n",
            "Epoch 39/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 4.4402e-04 - accuracy: 1.0000\n",
            "Epoch 40/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 4.0741e-04 - accuracy: 1.0000\n",
            "313/313 [==============================] - 1s 3ms/step - loss: 3.5755e-04 - accuracy: 1.0000\n",
            "MSE on training data = 0.037567589432001114 ; MSE of testing data = 0.00035754754208028316\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Plot thetraining and testing error w.r.t. epochs. Compare the errors and roughly indicate the over-fitting region\n",
        "in the plot.\n",
        "\"\"\"\n",
        "\n",
        "plt.plot(history_train.history['loss'])\n",
        "plt.plot(history_test.history['loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "m9BHYInYcwuq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "deeb8fd3-e735-47ef-8a14-c934723946f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "aZj7uKry95h7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aymen0627/ML_Topics/blob/Applications/Tensorflow%20to%20train%20hidden%20layer%20with%20MNIST%20dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GpDcGBdfFB0N"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mOPUsdA9Xewj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "487b38dd-a488-45b3-e17f-4ccedde965ae"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nsimilar to Problem 2, utilize Tensorflow and keras to train a 1-hidden\\nlayer classification NN using the MNIST digits (M = 10) dataset 2. In this dataset, we have N =\\n60000 training data points and 10000 examples for testing where each one consists of a gray scale\\nimage with F = 28 ∗28 = 784 features (or pixels).\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "#Group 8 - Aymen Hasnain & Thomas Kipping\n",
        "#Problem 3\n",
        "#double check N = 6000 data points part from question\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "import numpy as np\n",
        "\n",
        "\"\"\"\n",
        "similar to Problem 2, utilize Tensorflow and keras to train a 1-hidden\n",
        "layer classification NN using the MNIST digits (M = 10) dataset 2. In this dataset, we have N =\n",
        "60000 training data points and 10000 examples for testing where each one consists of a gray scale\n",
        "image with F = 28 ∗28 = 784 features (or pixels).\n",
        "\"\"\"\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "For the hidden layer,\n",
        "choose 100 units (dimension of the output of the of the layer). The activation functions are ReLU\n",
        "for σ(1) and softmax for σ(2). Construct the classification NN. When you compile the model, select\n",
        "the accuracy metric. Train using 40 epochs and batch size of 100.\n",
        "\n",
        "Do a grid search for the loss\n",
        "and optimizer. For losses, the choices are the cross entropy loss and the MSE. For the optimizer,\n",
        "select between ADAM and SGD. Out of the 4 possibilities, report the best performance and explain\n",
        "the reason for your selection. Furthermore, plot the classification accuracy for the training data and\n",
        "testing data w.r.t. epochs for each case.\n",
        "\n",
        "\"\"\"\n"
      ],
      "metadata": {
        "id": "bHSxBm9chgtF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "bcf090f4-0f29-42e2-b4a1-d4ce64a083aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nFor the hidden layer,\\nchoose 100 units (dimension of the output of the of the layer). The activation functions are ReLU\\nfor σ(1) and softmax for σ(2). Construct the classification NN. When you compile the model, select\\nthe accuracy metric. Train using 40 epochs and batch size of 100.\\n\\nDo a grid search for the loss\\nand optimizer. For losses, the choices are the cross entropy loss and the MSE. For the optimizer,\\nselect between ADAM and SGD. Out of the 4 possibilities, report the best performance and explain\\nthe reason for your selection. Furthermore, plot the classification accuracy for the training data and\\ntesting data w.r.t. epochs for each case.\\n\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#This is a regression model. \n",
        "#F is the number of features in each training or testing example. \n",
        "#K is the number of units in each of the hidden layers. This number need not be fixed for both layers. \n",
        "\n",
        "\"\"\"\n",
        "For regression, M=10. For Q3\n",
        "\"\"\"\n",
        "number_of_feature = 784\n",
        "number_of_units_in_hidden_layer = 100\n",
        "\n",
        "\n",
        "#### load the MNIST regression dataset\n",
        "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n",
        "\n",
        "#### pre-process the data\n",
        "image_vector_size = 784\n",
        "x_train = x_train.reshape(x_train.shape[0], image_vector_size)\n",
        "x_test = x_test.reshape(x_test.shape[0], image_vector_size)"
      ],
      "metadata": {
        "id": "z8-zI1ztjZ68",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2565bcc3-6a01-478c-8b78-313e091cc3d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 1s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "image_size = 784 # 28*28\n",
        "units = 10 # ten unique digits\n",
        "\n",
        "#### construct the NN regression model\n",
        "adam_ce_model = tf.keras.Sequential()\n",
        "adam_mse_model = tf.keras.Sequential()\n",
        "sgd_ce_model = tf.keras.Sequential()\n",
        "sgd_mse_model = tf.keras.Sequential()\n",
        "# define layer, change to 100 units here?\n",
        "hidden_layer_1 = layers.Dense(units=number_of_units_in_hidden_layer, activation='relu', input_shape=(image_size,)) #both activations need to be relu\n",
        "# add layer to the model, only 1 hidden layer for #3\n",
        "adam_ce_model.add(hidden_layer_1)\n",
        "adam_mse_model.add(hidden_layer_1)\n",
        "sgd_ce_model.add(hidden_layer_1)\n",
        "sgd_mse_model.add(hidden_layer_1)\n",
        "\n",
        "#M should be 10 for num3\n",
        "\n",
        "# define layer, channge units here to ***** 10 for M I believe ****\n",
        "output_layer = layers.Dense(units=units, activation='softmax') #no activation layer for output\n",
        "# add layer to the model\n",
        "adam_ce_model.add(output_layer)\n",
        "adam_mse_model.add(output_layer)\n",
        "sgd_ce_model.add(output_layer)\n",
        "sgd_mse_model.add(output_layer)\n",
        "\n",
        "#****SELECT BETWEEN ADAM AND SGD FOR OPTIMIZER\n",
        "adam_optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001)\n",
        "sgd_optimizer = tf.keras.optimizers.SGD(learning_rate = 0.001)  #.001 learning rate\n",
        "ce_loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
        "mse_loss = tf.keras.losses.MeanSquaredError()\n",
        "\n",
        "#### specify the number of epochs and batch size\n",
        "epochs     = 40 #need 40 epochs for num3\n",
        "batch_size = 100 #batch size of 100 for num3\n",
        "\n",
        "#### compile the model\n",
        "adam_ce_model.compile(optimizer=adam_optimizer, loss=ce_loss, metrics='accuracy') # mean absolute error\n",
        "adam_mse_model.compile(optimizer=adam_optimizer, loss=mse_loss, metrics='accuracy')\n",
        "\n",
        "sgd_ce_model.compile(optimizer=sgd_optimizer, loss=ce_loss, metrics='accuracy')\n",
        "sgd_mse_model.compile(optimizer=sgd_optimizer, loss=mse_loss, metrics='accuracy')\n"
      ],
      "metadata": {
        "id": "flcxAg42jmUt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# #### train the whole batch for 1000 epochs\n",
        "adam_ce_history_train = adam_ce_model.fit(x_train, y_train, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "adam_ce_train_error,_ = adam_ce_model.evaluate(x_train, y_train)\n",
        "adam_ce_history_test = adam_ce_model.fit(x_test, y_test, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "adam_ce_test_error ,_ = adam_ce_model.evaluate(x_test, y_test)\n",
        "print(\"MSE on training data = {} ; MSE of testing data = {}\".format(adam_ce_train_error, adam_ce_test_error))"
      ],
      "metadata": {
        "id": "s7pfzfP1jwva",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f8845333-7526-4816-c747-ae9509e1c7df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1082: UserWarning: \"`sparse_categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a sigmoid or softmax activation and thus does not represent logits. Was this intended?\"\n",
            "  return dispatch_target(*args, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "600/600 [==============================] - 6s 6ms/step - loss: 4.7135 - accuracy: 0.8454\n",
            "Epoch 2/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.6125 - accuracy: 0.8909\n",
            "Epoch 3/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.3623 - accuracy: 0.9199\n",
            "Epoch 4/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.2798 - accuracy: 0.9328\n",
            "Epoch 5/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.2182 - accuracy: 0.9444\n",
            "Epoch 6/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1904 - accuracy: 0.9493\n",
            "Epoch 7/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1795 - accuracy: 0.9529\n",
            "Epoch 8/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1639 - accuracy: 0.9563\n",
            "Epoch 9/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1514 - accuracy: 0.9589\n",
            "Epoch 10/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.1475 - accuracy: 0.9601\n",
            "Epoch 11/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1443 - accuracy: 0.9612\n",
            "Epoch 12/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1372 - accuracy: 0.9634\n",
            "Epoch 13/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1241 - accuracy: 0.9669\n",
            "Epoch 14/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 0.1179 - accuracy: 0.9676\n",
            "Epoch 15/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 0.1183 - accuracy: 0.9675\n",
            "Epoch 16/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1139 - accuracy: 0.9698\n",
            "Epoch 17/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1122 - accuracy: 0.9698\n",
            "Epoch 18/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 0.1038 - accuracy: 0.9721\n",
            "Epoch 19/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1059 - accuracy: 0.9713\n",
            "Epoch 20/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.1010 - accuracy: 0.9719\n",
            "Epoch 21/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0904 - accuracy: 0.9748\n",
            "Epoch 22/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0943 - accuracy: 0.9748\n",
            "Epoch 23/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0943 - accuracy: 0.9753\n",
            "Epoch 24/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0869 - accuracy: 0.9780\n",
            "Epoch 25/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0875 - accuracy: 0.9773\n",
            "Epoch 26/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 0.0872 - accuracy: 0.9771\n",
            "Epoch 27/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0823 - accuracy: 0.9781\n",
            "Epoch 28/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0786 - accuracy: 0.9796\n",
            "Epoch 29/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0780 - accuracy: 0.9800\n",
            "Epoch 30/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 0.0800 - accuracy: 0.9796\n",
            "Epoch 31/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0825 - accuracy: 0.9796\n",
            "Epoch 32/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0771 - accuracy: 0.9805\n",
            "Epoch 33/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0702 - accuracy: 0.9823\n",
            "Epoch 34/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 0.0730 - accuracy: 0.9807\n",
            "Epoch 35/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0785 - accuracy: 0.9813\n",
            "Epoch 36/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0670 - accuracy: 0.9833\n",
            "Epoch 37/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0642 - accuracy: 0.9836\n",
            "Epoch 38/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 0.0671 - accuracy: 0.9832\n",
            "Epoch 39/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 0.0681 - accuracy: 0.9843\n",
            "Epoch 40/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 0.0739 - accuracy: 0.9826\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.0571 - accuracy: 0.9847\n",
            "Epoch 1/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.3619 - accuracy: 0.9531\n",
            "Epoch 2/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.1532 - accuracy: 0.9623\n",
            "Epoch 3/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.1089 - accuracy: 0.9720\n",
            "Epoch 4/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0840 - accuracy: 0.9783\n",
            "Epoch 5/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0602 - accuracy: 0.9820\n",
            "Epoch 6/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0446 - accuracy: 0.9862\n",
            "Epoch 7/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0417 - accuracy: 0.9877\n",
            "Epoch 8/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0396 - accuracy: 0.9874\n",
            "Epoch 9/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0362 - accuracy: 0.9884\n",
            "Epoch 10/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0336 - accuracy: 0.9906\n",
            "Epoch 11/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0353 - accuracy: 0.9894\n",
            "Epoch 12/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0363 - accuracy: 0.9896\n",
            "Epoch 13/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0292 - accuracy: 0.9904\n",
            "Epoch 14/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0343 - accuracy: 0.9906\n",
            "Epoch 15/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0200 - accuracy: 0.9934\n",
            "Epoch 16/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0199 - accuracy: 0.9931\n",
            "Epoch 17/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0249 - accuracy: 0.9925\n",
            "Epoch 18/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0286 - accuracy: 0.9921\n",
            "Epoch 19/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0313 - accuracy: 0.9902\n",
            "Epoch 20/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0525 - accuracy: 0.9879\n",
            "Epoch 21/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0412 - accuracy: 0.9892\n",
            "Epoch 22/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0549 - accuracy: 0.9864\n",
            "Epoch 23/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0381 - accuracy: 0.9901\n",
            "Epoch 24/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0394 - accuracy: 0.9894\n",
            "Epoch 25/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0404 - accuracy: 0.9894\n",
            "Epoch 26/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0222 - accuracy: 0.9933\n",
            "Epoch 27/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0175 - accuracy: 0.9944\n",
            "Epoch 28/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0171 - accuracy: 0.9953\n",
            "Epoch 29/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0167 - accuracy: 0.9949\n",
            "Epoch 30/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0230 - accuracy: 0.9939\n",
            "Epoch 31/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0190 - accuracy: 0.9937\n",
            "Epoch 32/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0169 - accuracy: 0.9951\n",
            "Epoch 33/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0143 - accuracy: 0.9953\n",
            "Epoch 34/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0152 - accuracy: 0.9950\n",
            "Epoch 35/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0186 - accuracy: 0.9935\n",
            "Epoch 36/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0428 - accuracy: 0.9902\n",
            "Epoch 37/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0488 - accuracy: 0.9899\n",
            "Epoch 38/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 0.0453 - accuracy: 0.9913\n",
            "Epoch 39/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0220 - accuracy: 0.9939\n",
            "Epoch 40/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 0.0215 - accuracy: 0.9941\n",
            "313/313 [==============================] - 1s 2ms/step - loss: 0.0140 - accuracy: 0.9956\n",
            "MSE on training data = 0.05713880434632301 ; MSE of testing data = 0.013987368904054165\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Plot thetraining and testing error w.r.t. epochs. Compare the errors and roughly indicate the over-fitting region\n",
        "in the plot.\n",
        "\"\"\"\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "plt.plot(adam_ce_history_train.history['loss'])\n",
        "plt.plot(adam_ce_history_test.history['loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "m9BHYInYcwuq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "08885494-bfd5-4a26-850d-d7113866986e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# #### train the whole batch for 1000 epochs\n",
        "adam_mse_history_train = adam_mse_model.fit(x_train, y_train, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "adam_mse_train_error,_ = adam_mse_model.evaluate(x_train, y_train)\n",
        "adam_mse_history_test = adam_mse_model.fit(x_test, y_test, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "adam_mse_test_error ,_ = adam_mse_model.evaluate(x_test, y_test)\n",
        "print(\"MSE on training data = {} ; MSE of testing data = {}\".format(adam_mse_train_error, adam_mse_test_error))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sXG4AMamjei0",
        "outputId": "fc7669f0-760a-4fb8-e6d4-d8d681e6d9c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 27.3919 - accuracy: 0.9591\n",
            "Epoch 2/40\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 27.3774 - accuracy: 0.8719\n",
            "Epoch 3/40\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 27.3307 - accuracy: 0.3718\n",
            "Epoch 4/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3074 - accuracy: 0.1286\n",
            "Epoch 5/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3052 - accuracy: 0.1078\n",
            "Epoch 6/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3048 - accuracy: 0.1036\n",
            "Epoch 7/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3046 - accuracy: 0.1015\n",
            "Epoch 8/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3046 - accuracy: 0.1005\n",
            "Epoch 9/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3046 - accuracy: 0.1009\n",
            "Epoch 10/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0992\n",
            "Epoch 11/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0993\n",
            "Epoch 12/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0985\n",
            "Epoch 13/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1005\n",
            "Epoch 14/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0989\n",
            "Epoch 15/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1003\n",
            "Epoch 16/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0988\n",
            "Epoch 17/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1027\n",
            "Epoch 18/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1017\n",
            "Epoch 19/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0983\n",
            "Epoch 20/40\n",
            "600/600 [==============================] - 3s 6ms/step - loss: 27.3045 - accuracy: 0.1011\n",
            "Epoch 21/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 27.3045 - accuracy: 0.1011\n",
            "Epoch 22/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1017\n",
            "Epoch 23/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1031\n",
            "Epoch 24/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1018\n",
            "Epoch 25/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1004\n",
            "Epoch 26/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1005\n",
            "Epoch 27/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1004\n",
            "Epoch 28/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1013\n",
            "Epoch 29/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1024\n",
            "Epoch 30/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1004\n",
            "Epoch 31/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1010\n",
            "Epoch 32/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1020\n",
            "Epoch 33/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1005\n",
            "Epoch 34/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1013\n",
            "Epoch 35/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0995\n",
            "Epoch 36/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1022\n",
            "Epoch 37/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1032\n",
            "Epoch 38/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1026\n",
            "Epoch 39/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1019\n",
            "Epoch 40/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.0999\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 27.3046 - accuracy: 0.1023\n",
            "Epoch 1/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1029\n",
            "Epoch 2/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1036\n",
            "Epoch 3/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1006\n",
            "Epoch 4/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1033\n",
            "Epoch 5/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0973\n",
            "Epoch 6/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0962\n",
            "Epoch 7/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0951\n",
            "Epoch 8/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0974\n",
            "Epoch 9/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0990\n",
            "Epoch 10/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1018\n",
            "Epoch 11/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1048\n",
            "Epoch 12/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1049\n",
            "Epoch 13/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1024\n",
            "Epoch 14/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0987\n",
            "Epoch 15/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0949\n",
            "Epoch 16/40\n",
            "100/100 [==============================] - 0s 5ms/step - loss: 27.2503 - accuracy: 0.0957\n",
            "Epoch 17/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1002\n",
            "Epoch 18/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1030\n",
            "Epoch 19/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0998\n",
            "Epoch 20/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1019\n",
            "Epoch 21/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0982\n",
            "Epoch 22/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1014\n",
            "Epoch 23/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0984\n",
            "Epoch 24/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0959\n",
            "Epoch 25/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1001\n",
            "Epoch 26/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1023\n",
            "Epoch 27/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0955\n",
            "Epoch 28/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1027\n",
            "Epoch 29/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0985\n",
            "Epoch 30/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0943\n",
            "Epoch 31/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0997\n",
            "Epoch 32/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1016\n",
            "Epoch 33/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0959\n",
            "Epoch 34/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0988\n",
            "Epoch 35/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0953\n",
            "Epoch 36/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0984\n",
            "Epoch 37/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1051\n",
            "Epoch 38/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.0982\n",
            "Epoch 39/40\n",
            "100/100 [==============================] - 1s 5ms/step - loss: 27.2503 - accuracy: 0.0997\n",
            "Epoch 40/40\n",
            "100/100 [==============================] - 1s 7ms/step - loss: 27.2503 - accuracy: 0.0992\n",
            "313/313 [==============================] - 1s 2ms/step - loss: 27.2503 - accuracy: 0.0974\n",
            "MSE on training data = 27.304590225219727 ; MSE of testing data = 27.250308990478516\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(adam_mse_history_train.history['loss'])\n",
        "plt.plot(adam_mse_history_test.history['loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "fdkHtn6fkECR",
        "outputId": "15a3e0c4-fb74-4578-9106-d585fea7f292"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# #### train the whole batch for 1000 epochs\n",
        "sgd_ce_history_train = sgd_ce_model.fit(x_train, y_train, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "sgd_ce_train_error,_ = sgd_ce_model.evaluate(x_train, y_train)\n",
        "sgd_ce_history_test = sgd_ce_model.fit(x_test, y_test, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "sgd_ce_test_error ,_ = sgd_ce_model.evaluate(x_test, y_test)\n",
        "print(\"MSE on training data = {} ; MSE of testing data = {}\".format(sgd_ce_train_error, sgd_ce_test_error))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TyydZblKkGcy",
        "outputId": "fdbcbd3f-86ce-431b-b129-0f2a2e57c3c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 2.3041 - accuracy: 0.1120\n",
            "Epoch 2/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3026 - accuracy: 0.1124\n",
            "Epoch 3/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3019 - accuracy: 0.1125\n",
            "Epoch 4/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3018 - accuracy: 0.1125\n",
            "Epoch 5/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 2.3017 - accuracy: 0.1125\n",
            "Epoch 6/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3016 - accuracy: 0.1125\n",
            "Epoch 7/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3015 - accuracy: 0.1125\n",
            "Epoch 8/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3015 - accuracy: 0.1125\n",
            "Epoch 9/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3014 - accuracy: 0.1125\n",
            "Epoch 10/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3013 - accuracy: 0.1125\n",
            "Epoch 11/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3013 - accuracy: 0.1125\n",
            "Epoch 12/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3012 - accuracy: 0.1125\n",
            "Epoch 13/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3012 - accuracy: 0.1125\n",
            "Epoch 14/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3012 - accuracy: 0.1125\n",
            "Epoch 15/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3011 - accuracy: 0.1125\n",
            "Epoch 16/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3011 - accuracy: 0.1125\n",
            "Epoch 17/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3011 - accuracy: 0.1125\n",
            "Epoch 18/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3011 - accuracy: 0.1125\n",
            "Epoch 19/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 20/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 21/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 22/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 23/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 24/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 25/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 26/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3010 - accuracy: 0.1125\n",
            "Epoch 27/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 28/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 29/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 30/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 31/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 32/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 33/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 34/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 35/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 36/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 37/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 38/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 39/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 40/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 2.3009 - accuracy: 0.1125\n",
            "Epoch 1/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 2/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 3/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 4/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 5/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 6/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 7/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 8/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 9/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 10/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 11/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 12/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 13/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 14/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 15/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 16/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 17/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 18/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 19/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 20/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 21/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 22/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 23/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 24/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 25/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 26/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 27/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 28/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 29/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 30/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 31/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 32/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 33/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 34/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 35/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3010 - accuracy: 0.1135\n",
            "Epoch 36/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3009 - accuracy: 0.1135\n",
            "Epoch 37/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3009 - accuracy: 0.1135\n",
            "Epoch 38/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3009 - accuracy: 0.1135\n",
            "Epoch 39/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3009 - accuracy: 0.1135\n",
            "Epoch 40/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 2.3009 - accuracy: 0.1135\n",
            "313/313 [==============================] - 1s 2ms/step - loss: 2.3009 - accuracy: 0.1135\n",
            "MSE on training data = 2.300896406173706 ; MSE of testing data = 2.300935745239258\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(sgd_ce_history_train.history['loss'])\n",
        "plt.plot(sgd_ce_history_test.history['loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "L2fiSReGkUHc",
        "outputId": "20fd8822-23ba-4eb7-f559-c8430f36b09e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# #### train the whole batch for 1000 epochs\n",
        "sgd_mse_history_train = sgd_mse_model.fit(x_train, y_train, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "sgd_mse_train_error,_ = sgd_mse_model.evaluate(x_train, y_train)\n",
        "sgd_mse_history_test = sgd_mse_model.fit(x_test, y_test, epochs=epochs, batch_size = batch_size, verbose=1)\n",
        "sgd_mse_test_error ,_ = sgd_mse_model.evaluate(x_test, y_test)\n",
        "print(\"MSE on training data = {} ; MSE of testing data = {}\".format(sgd_mse_train_error, sgd_mse_test_error))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UW5-RmKXkWEl",
        "outputId": "42923b17-6cc0-4def-aaa5-770283e23b11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 2/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 3/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 4/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 5/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 6/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 7/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 8/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 9/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 10/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 11/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 12/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 13/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 14/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 15/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 16/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 17/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 18/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 19/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 20/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 21/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 22/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 23/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 24/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 25/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 26/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 27/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 28/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 29/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 30/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 31/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 32/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 33/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 34/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 35/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 36/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 37/40\n",
            "600/600 [==============================] - 3s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 38/40\n",
            "600/600 [==============================] - 3s 5ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 39/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "Epoch 40/40\n",
            "600/600 [==============================] - 2s 4ms/step - loss: 27.3045 - accuracy: 0.1125\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 27.3046 - accuracy: 0.1125\n",
            "Epoch 1/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 2/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 3/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 4/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 5/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 6/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 7/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 8/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 9/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 10/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 11/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 12/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 13/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 14/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 15/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 16/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 17/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 18/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 19/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 20/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 21/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 22/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 23/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 24/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 25/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 26/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 27/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 28/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 29/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 30/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 31/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 32/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 33/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 34/40\n",
            "100/100 [==============================] - 0s 3ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 35/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 36/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 37/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 38/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "Epoch 39/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "Epoch 40/40\n",
            "100/100 [==============================] - 0s 4ms/step - loss: 27.2503 - accuracy: 0.1135\n",
            "313/313 [==============================] - 1s 2ms/step - loss: 27.2504 - accuracy: 0.1135\n",
            "MSE on training data = 27.30459976196289 ; MSE of testing data = 27.250362396240234\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(sgd_mse_history_train.history['loss'])\n",
        "plt.plot(sgd_mse_history_test.history['loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "04PvrhnDkX8V",
        "outputId": "7360c939-937b-44c0-8447-652fc1ee9c74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Out of the four possible combinations, the ADAM optimizer using crossentropy was the best option. It had the second best learning, but it had, by far, the highest accuracy. The model accuracy was pushing 99% which is nearly perfect."
      ],
      "metadata": {
        "id": "sP_Wh5FbQYOR"
      }
    }
  ]
}